name: Weekly Supabase Database Backup

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 0"

concurrency:
  group: backup-supabase
  cancel-in-progress: false

jobs:
  backup:
    runs-on: ubuntu-latest
    timeout-minutes: 330

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create backup directory
        run: mkdir -p database/backup

      - name: Setup DATABASE_URL if not provided
        run: |
          if [ -z "$DATABASE_URL" ]; then
            PROJECT_REF=$(echo $SUPABASE_URL | sed 's/https:\/\/\([^.]*\).supabase.co/\1/')
            if [ -n "$SUPABASE_DB_PASSWORD" ]; then
              echo "DATABASE_URL=postgresql://postgres:${SUPABASE_DB_PASSWORD}@db.${PROJECT_REF}.supabase.co:5432/postgres" >> $GITHUB_ENV
              echo "DATABASE_URL constructed from Supabase project info"
            else
              echo "Warning: Neither DATABASE_URL nor SUPABASE_DB_PASSWORD is set"
              echo "pg_dump backup will be skipped"
            fi
          else
            echo "DATABASE_URL is already set"
          fi

      - name: Check if backup is already running
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          python -c "
          import os
          import sys
          try:
              from supabase import create_client, Client
              url = os.environ.get('SUPABASE_URL')
              key = os.environ.get('SUPABASE_KEY')
              if not url or not key:
                  print('SUPABASE_URL or SUPABASE_KEY not set. Proceeding...')
                  sys.exit(0)
              supabase = create_client(url, key)
              result = supabase.table('scraping_progress').select('id').eq('id', 7).eq('status', 'running').execute()
              if result.data:
                  print('Database backup is already running. Exiting...')
                  sys.exit(1)
              else:
                  print('No running database backup found. Proceeding...')
          except Exception as e:
              print(f'Could not check backup status: {e}')
              print('Proceeding with backup...')
          "

      - name: Run complete database backup
        run: python database/backup_supabase.py

      - name: Check backup results
        run: |
          echo "Checking backup results..."
          if [ -d "database/backup" ]; then
            echo "Backup directory exists"
            ls -la database/backup/
            BACKUP_COUNT=$(find database/backup -name "*.json" -o -name "*.dump" -o -name "*.sql" | wc -l)
            echo "Found $BACKUP_COUNT backup files"
            if [ $BACKUP_COUNT -gt 0 ]; then
              echo "Backup completed successfully"
            else
              echo "No backup files found"
            fi
          else
            echo "Backup directory not found"
            exit 1
          fi

      - name: Upload backup as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weekly-supabase-backup-${{ github.run_number }}
          path: database/backup/
          retention-days: 90

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backup-logs-${{ github.run_number }}
          path: |
            *.log
          retention-days: 30

      - name: Cleanup backup status on failure
        if: failure()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          python -c "
          import os
          import sys
          try:
              from supabase import create_client, Client
              url = os.environ.get('SUPABASE_URL')
              key = os.environ.get('SUPABASE_KEY')
              if url and key:
                  supabase = create_client(url, key)
                  supabase.table('scraping_progress').update({
                      'status': 'idle',
                      'last_processed_id': 'Backup failed - status reset'
                  }).eq('id', 7).execute()
                  print('Backup status reset to idle due to failure')
          except Exception as e:
              print(f'Could not reset backup status: {e}')
          "